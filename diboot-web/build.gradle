group 'com.diboot'
version '1.0'

apply plugin: 'java'
apply plugin: 'war'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
}

[compileJava, compileTestJava, javadoc]*.options*.encoding = "UTF-8"
configurations { providedCompile }
//环境配置,默认是开发环境
def profile = System.getProperty("profile") ?: "dev"
def isDevEnv = profile == null || profile == "dev" //是否为环境配置
sourceSets {
    main {
        resources {
            srcDirs "src/main/java", "src/main/resources/$profile"
            include '**/*.properties'
            include '**/*.xml'
            include '**/*.dtd'
            include '**/*.class'
        }
    }
}

dependencies {
    def springVersion = "5.0.10.RELEASE"
    def shiroVersion = "1.4.0"
    def poiVersion = "3.17"
    
    // providedCompile在编译时提供，不会写入war`
    providedCompile(
            "javax.servlet:javax.servlet-api:4.0.1"
    )
    if(isDevEnv){// 开发环境 启用Devtools
        compile fileTree(dir:'plugins', include:['*.jar'])
    }
    else{// 生产环境 剔除Devtools
        compile fileTree(dir:'plugins', excludes:['diboot-*.jar'])
    }

    // 依赖common项目
    compile project(":diboot-common")

    // 引入项目中/libs中的jar
    compile("org.hibernate.validator:hibernate-validator:6.0.13.Final",
            "org.glassfish:javax.el:3.0.1-b09")

    //Log4J2
    compile("org.apache.logging.log4j:log4j-api:2.11.1",
            "org.apache.logging.log4j:log4j-core:2.11.1",
            "org.apache.logging.log4j:log4j-slf4j-impl:2.11.1",
            "com.lmax:disruptor:3.4.2")
    compile("org.slf4j:slf4j-api:1.7.25")

    compile("commons-fileupload:commons-fileupload:1.3.3",
            "commons-codec:commons-codec:1.11",
            "org.apache.commons:commons-lang3:3.8.1",
            "commons-io:commons-io:2.6"
    )

    // 数据库连接依赖
    compile("org.mybatis:mybatis:3.4.6",
            "org.mybatis:mybatis-spring:1.3.2")
    compile("mysql:mysql-connector-java:5.1.47",
            "com.zaxxer:HikariCP:3.2.0")

    // Spring依赖
    compile("org.springframework:spring-aop:$springVersion",
            "org.springframework:spring-jdbc:$springVersion",
            "org.springframework:spring-expression:$springVersion",
            "org.springframework:spring-core:$springVersion",
            "org.springframework:spring-context-support:$springVersion",
            "org.springframework:spring-context:$springVersion",
            "org.springframework:spring-beans:$springVersion",
            "org.springframework:spring-tx:$springVersion",
            "org.springframework:spring-web:$springVersion",
            "org.springframework:spring-webmvc:$springVersion")

    // freemarker
    compile("org.freemarker:freemarker:2.3.28")
    
    // Apache Shiro Jars
    compile("org.apache.shiro:shiro-core:$shiroVersion",
            "org.apache.shiro:shiro-web:$shiroVersion",
            "org.apache.shiro:shiro-spring:$shiroVersion"
    )

    // json相关依赖
    compile ('com.alibaba:fastjson:1.2.51')

    // office文件相关依赖
    compile("org.apache.poi:poi:$poiVersion",
            "org.apache.poi:poi-ooxml:$poiVersion")

    // httpclient
    compile("org.apache.httpcomponents:httpclient:4.5.6")
    
    // 微信开发组件
    //compile("com.github.binarywang:weixin-java-mp:3.2.0")
    //compile("com.github.binarywang:weixin-java-cp:3.2.0")
    //compile("com.github.binarywang:weixin-java-open:3.2.0")

    // 测试编译时的依赖
    testCompile("org.springframework:spring-test:$springVersion",
            "com.lmax:disruptor:3.4.2",
            "junit:junit:4.12")
}
/* 复制xml及清理各环境的配置文件 */
task clearProfileFolder(type: Delete) {
    // 将对应环境的配置文件拷贝过去
    copy {
        from "build/resources/main/$profile"
        into "build/resources/main"
    }
    // 删除各环境文件夹
    delete "build/resources/main/dev"
    delete "build/resources/main/prod"
}
// 打包war
war{
    dependsOn clearProfileFolder
    manifest {
        attributes('Implementation-Title': 'Dibo Web')
    }
}
sourceSets.main.compileClasspath += configurations.providedCompile
sourceSets.test.compileClasspath += configurations.providedCompile
sourceSets.test.runtimeClasspath += configurations.providedCompile